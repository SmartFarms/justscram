cmake_minimum_required (VERSION 3.1.0)
include(CheckFunctionExists)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# add_definitions(-DDEBUG_PRINT)
# add_definitions(-DDEBUG_STATIC_VALUES)

check_function_exists(arc4random_buf HAVE_ARC4RANDOM_BUF)
if(HAVE_ARC4RANDOM_BUF)
    add_definitions(-DHAVE_ARC4RANDOM_BUF)
endif()

if(NOT CMAKE_SYSTEM_NAME MATCHES "Linux")
    check_function_exists(explicit_bzero HAVE_EXPLICIT_BZERO)
    if(HAVE_EXPLICIT_BZERO)
        add_definitions(-DHAVE_EXPLICIT_BZERO)
    endif()
endif()

check_function_exists(memset_s HAVE_MEMSET_S)
if(HAVE_MEMSET_S)
    add_definitions(-DHAVE_MEMSET_S)
endif()

set(CRYPTO_SRC crypto/hmac_sha1.c crypto/pkcs5_pbkdf2.c crypto/sha1.c base64/base64.c compat/freezero.c)

if(NOT HAVE_ARC4RANDOM_BUF)
    set(CRYPTO_SRC ${CRYPTO_SRC} compat/arc4random.c)
    if(NOT HAVE_GETENTROPY)
        if(CMAKE_HOST_WIN32)
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/getentropy_win.c)
        elseif(CMAKE_SYSTEM_NAME MATCHES "AIX")
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/getentropy_aix.c)
        elseif(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/getentropy_freebsd.c)
        elseif(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
        elseif(CMAKE_SYSTEM_NAME MATCHES "HP-UX")
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/getentropy_hpux.c)
        elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/getentropy_linux.c)
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/sha512.c)
        elseif(CMAKE_SYSTEM_NAME MATCHES "NetBSD")
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/getentropy_netbsd.c)
        elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/getentropy_osx.c)
        elseif(CMAKE_SYSTEM_NAME MATCHES "SunOS")
            set(CRYPTO_SRC ${CRYPTO_SRC} compat/getentropy_solaris.c)
        endif()
        set(EXTRA_EXPORT ${EXTRA_EXPORT} getentropy)
    endif()
endif()

if(NOT HAVE_EXPLICIT_BZERO)
    if(CMAKE_HOST_WIN32)
        set(CRYPTO_SRC ${CRYPTO_SRC} compat/explicit_bzero_win.c)
    else()
        set(CRYPTO_SRC ${CRYPTO_SRC} compat/explicit_bzero.c)
    endif()
endif()

if(ENABLE_ALL_CXX_COMPILE)
    set_source_files_properties(scram.c messages.c passwords.c testscram.c PROPERTIES LANGUAGE CXX)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set_source_files_properties(scram.c PROPERTIES COMPILE_FLAGS -Wno-deprecated)
    set_source_files_properties(messages.c PROPERTIES COMPILE_FLAGS -Wno-deprecated)
    set_source_files_properties(passwords.c PROPERTIES COMPILE_FLAGS -Wno-deprecated)
    set_source_files_properties(testscram.c PROPERTIES COMPILE_FLAGS -Wno-deprecated)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    set_source_files_properties(scram.c PROPERTIES COMPILE_FLAGS -Wno-deprecated)
    set_source_files_properties(messages.c PROPERTIES COMPILE_FLAGS -Wno-deprecated)
    set_source_files_properties(passwords.c PROPERTIES COMPILE_FLAGS -Wno-deprecated)
    set_source_files_properties(testscram.c PROPERTIES COMPILE_FLAGS -Wno-deprecated)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set_source_files_properties(testscram.c PROPERTIES COMPILE_FLAGS -Wno-write-strings)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    endif()
endif()

add_library(JustSCRAM scram.c messages.c passwords.c ${CRYPTO_SRC})

add_executable(testscram testscram.c)
target_link_libraries(testscram JustSCRAM)
